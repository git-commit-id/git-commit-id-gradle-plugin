plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'signing'
    id 'idea'
    id 'checkstyle'
    id("com.gradle.plugin-publish") version "1.2.1"
}

group = "io.github.git-commit-id"

project.gradle.taskGraph.whenReady {
    if (gradle.taskGraph.hasTask(":publishAllPublicationsToLocalPluginRepositoryRepository")) {
        version = "0.0.1-alpha"

        // Skip signing when we publish to local
        tasks.withType(Sign) {
            enabled = false
        }
    } else {
        version = "0.0.1-beta"
    }
}

repositories {
    mavenCentral()
}

ext {
    jdkCompileVersion = 11
}

dependencies {
    implementation gradleApi()
    implementation 'io.github.git-commit-id:git-commit-id-plugin-core:6.0.0-rc.5'

    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'

    testImplementation gradleTestKit()
    testImplementation localGroovy()
}

tasks.withType(Test) {
    useJUnitPlatform()
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.release = ext.properties.jdkCompileVersion
}

sourceCompatibility = "${jdkCompileVersion}"
targetCompatibility = "${jdkCompileVersion}"

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion.set(JavaLanguageVersion.of("${jdkCompileVersion}"))
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

checkstyle {
    toolVersion = '10.10.0'
    configProperties = [
            "samedir": "${rootProject.file('.github/.checkstyle')}",
            "org.checkstyle.google.suppressionfilter.config": "${rootProject.file('.github/.checkstyle/checkstyle-suppressions.xml')}",
    ]
    configFile = rootProject.file('.github/.checkstyle/google_checks_checkstyle_10.10.0.xml')
    maxErrors = 0
    maxWarnings = 0
    showViolations = false
}

signing {
    // By default the Signing Plugin uses a Java-based implementation of PGP for signing.
    // This implementation cannot use the gpg-agent program for managing private keys, though.
    // If you want to use the gpg-agent, you can change the signatory implementation used by the Signing Plugin:
    useGpgCmd() // Without this method, gradle will not work with GnuPG keys.
}

publishing {
    repositories {
        maven {
            // ./gradlew publishAllPublicationsToLocalPluginRepositoryRepository
            name = "localPluginRepository"
            url = "${project.gradle.gradleUserHomeDir}/.local-plugin-repository"
        }
    }
}

gradlePlugin {
    website = "https://github.com/git-commit-id/${rootProject.name}"
    vcsUrl = "https://github.com/git-commit-id/${rootProject.name}.git"

    plugins {
        gitCommitIdPlugin {
            id = "${group}.${rootProject.name}"
            displayName = "Plugin to make basic git repository information available in the gradle world."
            description = "A plugin that helps you to extract valuable information from your git repository that can be included in your final artifact for reproducability."
            tags.addAll("git", "gradle-plugin", "versioning")
            implementationClass = 'io.github.git.commit.id.gradle.plugin.GitCommitIdPlugin'
        }
    }
    automatedPublishing = true
}

